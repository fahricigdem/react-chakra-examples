{"version":3,"sources":["ColorModeSwitcher.js","logo.svg","Logo.js","App.js","App1.js","App2.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","spin","keyframes","Logo","animation","usePrefersReducedMotion","undefined","src","logo","App1","theme","textAlign","minH","p","justifySelf","spacing","h","pointerEvents","href","target","rel","_hover","textDecoration","ExternalLink","CFaUserAlt","chakra","FaUserAlt","CFaLock","FaLock","useState","showPassword","setShowPassword","flexDirection","width","height","backgroundColor","justifyContent","alignItems","flexDir","mb","bg","minW","base","md","boxShadow","children","type","placeholder","borderRadius","colorScheme","countries","value","label","App2","React","pickerItems","setPickerItems","selectedItems","setSelectedItems","px","py","onCreateItem","item","curr","items","tagStyleProps","rounded","pt","pb","onSelectedItemsChange","changes","handleSelectedItemsChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87774ea6.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.250a3724.svg\";","import React from 'react';\nimport { Image, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';\nimport logo from './logo.svg';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = props => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 2s linear`;\n\n  return <Image animation={animation} src={logo} {...props} />;\n};\n","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Logo } from './Logo';\nimport { ExternalLinkIcon } from '@chakra-ui/icons'\n\nfunction App1() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"50vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            <Logo h=\"20vmin\" pointerEvents=\"none\" />\n            <Text>\n              Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\n            </Text>\n            <Link\n              color=\"teal.500\"\n              href=\"https://chakra-ui.com\"\n              fontSize=\"2xl\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              _hover={{ textDecoration: \"none\" }}\n            >\n              Learn Chakra {' '}\n              <ExternalLinkIcon />\n\n            </Link>\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App1;\n","import { useState } from \"react\";\nimport {\n  Flex,\n  Heading,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  Link,\n  Avatar,\n  FormControl,\n  FormHelperText,\n  InputRightElement\n} from \"@chakra-ui/react\";\nimport { FaUserAlt, FaLock } from \"react-icons/fa\";\n\nconst CFaUserAlt = chakra(FaUserAlt);\nconst CFaLock = chakra(FaLock);\n\nconst App1 = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleShowClick = () => setShowPassword(!showPassword);\n\n  return (\n\n    <Flex\n      flexDirection=\"column\"\n      width=\"100wh\"\n      height=\"70vh\"\n      backgroundColor=\"gray.200\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"teal.500\" />\n        <Heading color=\"teal.400\">Welcome</Heading>\n        <Box minW={{ base: \"90%\", md: \"468px\" }}>\n          <form>\n            <Stack\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"2xl\"\n            >\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaUserAlt color=\"gray.300\" />}\n                  />\n                  <Input type=\"email\" placeholder=\"email address\" />\n                </InputGroup>\n              </FormControl>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.300\"\n                    children={<CFaLock color=\"gray.300\" />}\n                  />\n                  <Input\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                  />\n                  <InputRightElement width=\"4.5rem\">\n                    <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowClick}>\n                      {showPassword ? \"Hide\" : \"Show\"}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n                <FormHelperText textAlign=\"right\">\n                  <Link>forgot password?</Link>\n                </FormHelperText>\n              </FormControl>\n              <Button\n                borderRadius={4}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                width=\"full\"\n              >\n                Login\n              </Button>\n            </Stack>\n          </form>\n        </Box>\n      </Stack>\n      <Box>\n        New to us?{\" \"}\n        <Link color=\"teal.500\" href=\"#\">\n          Sign Up\n        </Link>\n      </Box>\n    </Flex>\n\n  );\n};\n\nexport default App1;\n","import React from \"react\";\nimport { Box } from \"@chakra-ui/react\";\n\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\n\nconst countries = [\n  { value: \"ghana\", label: \"Ghana\" },\n  { value: \"nigeria\", label: \"Nigeria\" },\n  { value: \"kenya\", label: \"Kenya\" },\n  { value: \"southAfrica\", label: \"South Africa\" },\n  { value: \"unitedStates\", label: \"United States\" },\n  { value: \"canada\", label: \"Canada\" },\n  { value: \"germany\", label: \"Germany\" }\n];\n\nexport default function App2() {\n  const [pickerItems, setPickerItems] = React.useState(countries);\n  const [selectedItems, setSelectedItems] = React.useState([]);\n\n  const handleCreateItem = (item) => {\n    setPickerItems((curr) => [...curr, item]);\n    setSelectedItems((curr) => [...curr, item]);\n  };\n\n  const handleSelectedItemsChange = (selectedItems) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  return (\n\n    <Box px={8} py={4} height=\"40vh\">\n      <CUIAutoComplete\n        label=\"Choose preferred work locations\"\n        placeholder=\"Type a Country\"\n        onCreateItem={handleCreateItem}\n        items={pickerItems}\n        tagStyleProps={{\n          rounded: \"full\",\n          pt: 1,\n          pb: 2,\n          px: 2,\n          fontSize: \"1rem\"\n        }}\n        selectedItems={selectedItems}\n        onSelectedItemsChange={(changes) =>\n          handleSelectedItemsChange(changes.selectedItems)\n        }\n      />\n    </Box>\n\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport App1 from './App1';\nimport App2 from './App2';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  ChakraProvider,\n  theme\n} from '@chakra-ui/react';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App1 />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root1')\n);\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App2 />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root2')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}