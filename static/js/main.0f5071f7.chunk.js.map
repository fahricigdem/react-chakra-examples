{"version":3,"sources":["logo.svg","Logo.js","App.js","App1.js","App2.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["spin","keyframes","Logo","props","animation","usePrefersReducedMotion","undefined","src","logo","App1","textAlign","fontSize","minH","p","spacing","h","pointerEvents","color","href","target","rel","_hover","textDecoration","ExternalLink","CFaUserAlt","chakra","FaUserAlt","CFaLock","FaLock","useState","showPassword","setShowPassword","email","setEmail","display","setDisplay","flexDirection","width","height","backgroundColor","justifyContent","alignItems","flexDir","mb","bg","minW","base","md","onSubmit","e","preventDefault","alert","boxShadow","children","type","value","onChange","placeholder","isRequired","size","onClick","icon","ViewOff","View","borderRadius","variant","colorScheme","countries","label","App2","React","pickerItems","setPickerItems","selectedItems","setSelectedItems","setValue","pinok","setPinok","isOpen","setIsOpen","onClose","cancelRef","useRef","px","py","onCreateItem","item","curr","items","tagStyleProps","rounded","pt","pb","onSelectedItemsChange","changes","handleSelectedItemsChange","maxW","m","onComplete","leastDestructiveRef","fontWeight","ref","console","log","ml","direction","wrap","w","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","theme","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f5071f7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.250a3724.svg\";","import React from 'react';\nimport { Image, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';\nimport logo from './logo.svg';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = props => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 2s linear`;\n\n  return <Image animation={animation} src={logo} {...props} />;\n};\n","import React from 'react';\nimport {\n  Box,\n  Text,\n  Link,\n  VStack,\n  Grid,\n} from '@chakra-ui/react';\n\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Logo } from './Logo';\nimport { ExternalLinkIcon } from '@chakra-ui/icons'\n\nfunction App1() {\n  return (\n\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Grid minH=\"50vh\" p={3}>\n        <VStack spacing={8}>\n          <Logo h=\"20vmin\" pointerEvents=\"none\" />\n          <Text>\n            Weiter immer weiter...\n          </Text>\n          <Link\n            color=\"teal.500\"\n            href=\"https://chakra-ui.com\"\n            fontSize=\"2xl\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            _hover={{ textDecoration: \"none\" }}\n          >\n            Learn Chakra {' '}\n            <ExternalLinkIcon />\n\n          </Link>\n        </VStack>\n      </Grid>\n    </Box>\n\n  );\n}\n\nexport default App1;\n","import { useState } from \"react\";\nimport {\n  Flex,\n  Heading, Text,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  Link,\n  Avatar,\n  FormControl,\n  FormHelperText,\n  InputRightElement\n} from \"@chakra-ui/react\";\nimport { FaUserAlt, FaLock } from \"react-icons/fa\";\nimport { IconButton } from \"@chakra-ui/react\"\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons'\n\nconst CFaUserAlt = chakra(FaUserAlt);\nconst CFaLock = chakra(FaLock);\n\nconst App1 = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [display, setDisplay] = useState(\"none\");\n\n\n  return (\n\n    <Flex\n      flexDirection=\"column\"\n      width=\"100wh\"\n      height=\"70vh\"\n      backgroundColor=\"gray.200\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"teal.500\" />\n        <Heading color=\"teal.400\">Welcome</Heading>\n        <Box minW={{ base: \"90%\", md: \"468px\" }}>\n          <form onSubmit={(e) => { e.preventDefault(); setDisplay(\"block\"); alert(`Hallo ${email}`) }}>\n            <Stack\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"2xl\"\n            >\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaUserAlt color=\"gray.300\" />}\n                  />\n                  <Input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"email address\" isRequired />\n                </InputGroup>\n              </FormControl>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.300\"\n                    children={<CFaLock color=\"gray.300\" />}\n                  />\n                  <Input\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                    isRequired\n                  />\n                  <InputRightElement width=\"3rem\">\n                    <IconButton h=\"1.75rem\" size=\"sm\" onClick={() => setShowPassword(!showPassword)}\n                      icon={showPassword ? <ViewOffIcon /> : <ViewIcon />}\n                    />\n                  </InputRightElement>\n                </InputGroup>\n                <FormHelperText textAlign=\"right\">\n                  <Link>forgot password?</Link>\n                </FormHelperText>\n              </FormControl>\n              <Button\n                borderRadius={4}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                width=\"full\"\n              >\n                Login\n              </Button>\n            </Stack>\n          </form>\n        </Box>\n      </Stack>\n      <Box>\n        New to us?{\" \"}\n        <Link color=\"teal.500\" href=\"#\"> Sign Up </Link>\n      </Box>\n      <Heading display={display}>\n        {email}\n      </Heading>\n    </Flex>\n\n  );\n};\n\nexport default App1;\n","import React from \"react\";\nimport { Box, Button, Flex, Wrap } from \"@chakra-ui/react\";\nimport { VStack, Container, Heading } from \"@chakra-ui/react\";\nimport { HStack, PinInput, PinInputField } from \"@chakra-ui/react\";\nimport { AlertDialog, AlertDialogBody, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, AlertDialogOverlay, } from \"@chakra-ui/react\";\n\nimport { CUIAutoComplete } from \"chakra-ui-autocomplete\";\n\nconst countries = [\n  { value: \"ghana\", label: \"Ghana\" },\n  { value: \"nigeria\", label: \"Nigeria\" },\n  { value: \"kenya\", label: \"Kenya\" },\n  { value: \"southAfrica\", label: \"South Africa\" },\n  { value: \"unitedStates\", label: \"United States\" },\n  { value: \"canada\", label: \"Canada\" },\n  { value: \"germany\", label: \"Germany\" }\n];\n\nexport default function App2() {\n  const [pickerItems, setPickerItems] = React.useState(countries);\n  const [selectedItems, setSelectedItems] = React.useState([]);\n\n  const handleCreateItem = (item) => {\n    setPickerItems((curr) => [...curr, item]);\n    setSelectedItems((curr) => [...curr, item]);\n  };\n\n  const handleSelectedItemsChange = (selectedItems) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n    }\n  };\n\n  ///pin start\n  const [value, setValue] = React.useState(\"\")\n  const [pinok, setPinok] = React.useState(false)\n\n  const handleChange = (value) => {\n    setValue(value)\n    setPinok(false)\n  }\n\n  const handleComplete = (value) => {\n    setPinok(true)\n  }\n  ///pin end\n  const [isOpen, setIsOpen] = React.useState(false)\n  const onClose = () => setIsOpen(false)\n  const onDelete = () => console.log(\"deleted\")\n  const cancelRef = React.useRef()\n  ///aler dialog end\n\n  return (\n    <>\n      <Heading>chakra-ui-autocomplete</Heading>\n      <Box px={8} py={4} height=\"60vh\">\n        <CUIAutoComplete\n          label=\"Choose preferred work locations\"\n          placeholder=\"Type a Country\"\n          onCreateItem={handleCreateItem}\n          items={pickerItems}\n          tagStyleProps={{\n            rounded: \"full\",\n            pt: 1,\n            pb: 2,\n            px: 2,\n            fontSize: \"1rem\"\n          }}\n          selectedItems={selectedItems}\n          onSelectedItemsChange={(changes) =>\n            handleSelectedItemsChange(changes.selectedItems)\n          }\n        />\n      </Box>\n      <br />\n      <Heading>Container</Heading>\n      <VStack>\n        <Container bg=\"gray.100\" maxW=\"container.xl\">Extra-Large Container</Container>\n        <Container bg=\"gray.100\" maxW=\"container.lg\">Large Container</Container>\n        <Container bg=\"gray.100\" maxW=\"container.md\">Medium Container</Container>\n        <Container bg=\"gray.100\" maxW=\"container.sm\">Small Container</Container>\n      </VStack>\n\n      <Heading>Pin</Heading>\n      <Container maxW=\"container.md\">\n        <HStack m=\"5\">\n          <PinInput value={value} onChange={handleChange} onComplete={handleComplete}>\n            <PinInputField />\n            <PinInputField />\n            <PinInputField />\n            <PinInputField />\n          </PinInput>\n          {pinok && <p>{value}</p>}\n\n        </HStack>\n      </Container>\n\n      <Heading>Alert Dialog</Heading>\n      <Container maxW=\"container.md\">\n        <Button colorScheme=\"red\" m=\"5\" onClick={() => setIsOpen(true)}>\n          Delete Customer\n        </Button>\n\n        <AlertDialog\n          isOpen={isOpen}\n          leastDestructiveRef={cancelRef}\n          onClose={onClose}\n        >\n          <AlertDialogOverlay>\n            <AlertDialogContent bg=\"blue.100\">\n              <AlertDialogHeader bg=\"blue.500\" fontSize=\"lg\" fontWeight=\"bold\">\n                Delete Customer\n              </AlertDialogHeader>\n\n              <AlertDialogBody>\n                Are you sure? You can't undo this action afterwards.\n              </AlertDialogBody>\n\n              <AlertDialogFooter>\n                <Button ref={cancelRef} onClick={onClose}>\n                  Cancel\n                </Button>\n                <Button colorScheme=\"red\" onClick={onDelete} ml={3}>\n                  Delete\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialogOverlay>\n        </AlertDialog>\n      </Container>\n\n      <Container maxW=\"container.md\" bg=\"grey\" mb=\"40\" >\n        <Wrap color=\"grey\" direction=\"row\" textAlign=\"center\" wrap=\"true\">\n\n          <Box bg=\"red.300\" w=\"180px\" height=\"40\" >1</Box>\n          <Box bg=\"blue.200\" w=\"560px\" height=\"60\" >2</Box>\n          <Box bg=\"green.200\" w=\"160px\" height=\"40\">3</Box>\n          <Box bg=\"yellow.200\" w=\"260px\" height=\"40\">4</Box>\n          <Box bg=\"tomato\" w=\"260px\" height=\"40\">5</Box>\n          <Box bg=\"pink\" w=\"560px\" height=\"40\">6</Box>\n\n        </Wrap>\n      </Container>\n\n      <Container maxW=\"container.md\" bg=\"grey\">\n\n\n      </Container>\n\n    </>\n\n  );\n}\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport App1 from './App1';\nimport App2 from './App2';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  ChakraProvider,\n  theme\n} from '@chakra-ui/react';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App1 />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root1')\n);\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App2 />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root2')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}